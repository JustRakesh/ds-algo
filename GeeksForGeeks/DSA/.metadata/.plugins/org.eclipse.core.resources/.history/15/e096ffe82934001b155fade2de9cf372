package recursion;

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Test {

	/*
	 * Complete the 'getMinimumDifference' function below.
	 *
	 * The function is expected to return an INTEGER_ARRAY. The function accepts
	 * following parameters: 1. STRING_ARRAY a 2. STRING_ARRAY b
	 */

	public static List<Integer> getMinimumDifference(List<String> a, List<String> b) {
		// Write your code here
		List<Integer> result = new ArrayList<>();
		for (int i = 0; i < a.size(); i++) {
			char[] first = a.get(i).toCharArray();
			char[] second = b.get(i).toCharArray();
			int difference = 0;
			if (first.length == second.length) {
				for (int j = 0; j < first.length; j++) {
					for (int k = 0; k < second.length; k++) {
						if (first[j] == second[k])
							break;
						if (k == second.length - 1)
							difference++;
					}

				}
				result.add(difference);
			} else {
				result.add(-1);
			}
		}
		return result;
	}

	public static void main(String[] args) {
		List<String> list1 = new ArrayList<String>();
		list1.add("a");
		list1.add("jk");
		list1.add("abb");
		list1.add("mn");
		list1.add("abc");
		List<String> list2 = new ArrayList<String>();
		list2.add("bb");
		list2.add("kj");
		list2.add("bbc");
		list2.add("op");
		list2.add("def");
		List<Integer> result = Test.getMinimumDifference(list1, list2);
		System.out.println(result);
	}
}
